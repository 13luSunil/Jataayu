import dependancies.Config
import dependancies.Deps
import dependancies.Modules

apply plugin: 'com.android.application'
apply from: rootProject.file("android-commons.gradle")
apply from: rootProject.file("jacoco.gradle")

android {
    defaultConfig {
        minSdkVersion Config.minSdkVersion
        targetSdkVersion Config.compileSdkVersion

        testInstrumentationRunner "in.projecteka.jataayu.testUtil.JataayuJUnitRunner"
    }

    buildTypes {
        debug {
            debuggable true
            resValue 'string', 'app_name', 'Jataayu Debug'
            applicationIdSuffix '.debug'
        }
        qa {
            debuggable true
            shrinkResources true
            minifyEnabled true
            applicationIdSuffix '.qa'
            resValue 'string', 'app_name', 'Jataayu QA'
        }
        release {
            debuggable false
            shrinkResources true
            minifyEnabled true
            resValue 'string', 'app_name', 'Jataayu'
        }
    }
}

task decodeKeystorePrebuildTask(type: Exec) {
    doFirst {
        workingDir "$projectDir"
        //Generate BASE64 encoded keystore with command "openssl base64 -A -in keystore.jks"
        //and save it to environment variable called "UPLOAD_KEYSTORE_ENCODED"
        String encodedKeystore = System.getenv("UPLOAD_KEYSTORE_ENCODED")
        String command = "echo $encodedKeystore | base64 --decode > keystore.jks"
        println(command)
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            commandLine 'cmd', '/c', "$command"
        } else {
            commandLine 'sh', '-c', "$command"
        }
    }
}

dependencies {
    api project(Modules.provider)
    api project(Modules.consent)
    api project(Modules.utils)
    api project(Modules.presentation)
    api project(Modules.account)
    api project(Modules.registration)

    androidTestImplementation Deps.Testing.Helpers.kappuccino

    kaptAndroidTest Deps.AndroidX.dataBindingCompiler
}

task runGitHookSetup {
    exec {
        commandLine 'sh', './../setup.sh'
    }
}

task allTests(dependsOn: ['connectedDebugAndroidTest', 'testDebugUnitTest'])

afterEvaluate {
    tasks['assemble'].dependsOn runGitHookSetup
}