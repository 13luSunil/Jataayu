apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply from: rootProject.file("jacoco.gradle")

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildTools
    defaultConfig {
        applicationId config.applicationId
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.compileSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            storeFile file("$projectDir/keystore.jks")
            storePassword System.getenv("UPLOAD_KEY_PASSWORD")
            keyAlias System.getenv("UPLOAD_KEY")
            keyPassword System.getenv("UPLOAD_KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            resValue 'string', 'app_name', 'Jataayu Debug'
            resValue 'color', 'icon_tint_color', '#000'
            testCoverageEnabled true
            minifyEnabled false
            debuggable true
            applicationIdSuffix '.debug'
            versionNameSuffix 'debug'
        }
        qa {
            resValue 'string', 'app_name', 'Jataayu'
            resValue 'color', 'icon_tint_color', '#EC1C23'
            minifyEnabled true
            debuggable true
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            resValue 'string', 'app_name', 'Jataayu'
            resValue 'color', 'icon_tint_color', '#EC1C23'
            debuggable false
            minifyEnabled true
            shrinkResources true
            signingConfig = signingConfigs.release
            testCoverageEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'

        String sharedTestJavaDir = 'src/sharedTest/java'
        String sharedTestResourcesDir = 'src/sharedTest/resources'

        test {
            java.srcDir sharedTestJavaDir
            resources.srcDir sharedTestResourcesDir
        }
        androidTest {
            java.srcDir sharedTestJavaDir
            resources.srcDir sharedTestResourcesDir
        }
    }

    dataBinding {
        enabled = true
        enabledForTests = true
    }

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    android.testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

task decodeKeystorePrebuildTask(type: Exec) {
    doFirst {
        workingDir "$projectDir"
        //Generate BASE64 encoded keystore with command "openssl base64 -A -in keystore.jks"
        //and save it to environment variable called "UPLOAD_KEYSTORE_ENCODED"
        String encodedKeystore = System.getenv("UPLOAD_KEYSTORE_ENCODED")
        String command = "echo $encodedKeystore | base64 --decode > keystore.jks"
        println(command)
        if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
            commandLine 'cmd', '/c', "$command"
        } else {
            commandLine 'sh', '-c', "$command"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$libVersions.kotlin"
    implementation "androidx.appcompat:appcompat:$libVersions.appcompat"
    implementation "androidx.core:core-ktx:$libVersions.coreKtx"
    implementation "androidx.constraintlayout:constraintlayout:$libVersions.constraintLayout"
    testImplementation "org.jacoco:org.jacoco.agent:$libVersions.jacoco"
    testImplementation "junit:junit:$libVersions.jUnit"
    androidTestImplementation "androidx.test.ext:junit:$libVersions.androidxTest"
    androidTestImplementation "androidx.test.espresso:espresso-core:$libVersions.espresso"
}